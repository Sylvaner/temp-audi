/**
 * Utilitaires pour la gestion des langues
 */

import type { Place, PlaceContent } from '@/types'
import dataJson from '@/data/data.json'

const config = dataJson.config

/**
 * R√©cup√®re les langues r√©ellement disponibles (intersection data.json + fichiers locales)
 * Cette fonction sera mise √† jour par le syst√®me i18n
 */
let actuallyAvailableLanguages: string[] = []

/**
 * Met √† jour la liste des langues r√©ellement disponibles
 * @param languages Langues trouv√©es avec fichiers de traduction
 */
export function setActuallyAvailableLanguages(languages: string[]) {
  actuallyAvailableLanguages = languages
}

/**
 * R√©cup√®re les langues r√©ellement disponibles (avec fichiers de traduction)
 * @returns Tableau des codes de langues r√©ellement disponibles
 */
export function getActuallyAvailableLanguages(): string[] {
  return actuallyAvailableLanguages.length > 0
    ? actuallyAvailableLanguages
    : config.availableLanguages
}

/**
 * R√©cup√®re le contenu d'un lieu dans la langue demand√©e
 * avec fallback sur la langue par d√©faut
 */
export function getPlaceContent(
  place: Place,
  language: string,
  defaultLanguage: string = config.defaultLanguage,
): PlaceContent | null {
  // Essaie la langue demand√©e
  if (place.content[language]) {
    return place.content[language]
  }

  // Fallback sur la langue par d√©faut
  if (place.content[defaultLanguage]) {
    return place.content[defaultLanguage]
  }

  // Fallback sur la premi√®re langue disponible
  const firstAvailable = Object.keys(place.content)[0]
  if (firstAvailable) {
    return place.content[firstAvailable]
  }

  return null
}

/**
 * V√©rifie si un lieu a du contenu dans une langue donn√©e
 */
export function hasLanguage(place: Place, language: string): boolean {
  return !!place.content[language]
}

/**
 * R√©cup√®re toutes les langues disponibles pour un lieu
 */
export function getAvailableLanguages(place: Place): string[] {
  return Object.keys(place.content)
}

/**
 * D√©tecte la meilleure langue √† utiliser en fonction des pr√©f√©rences du navigateur
 * @returns Le code de langue d√©tect√© ou la langue par d√©faut
 */
export function detectBrowserLanguage(): string {
  // R√©cup√®re toutes les langues pr√©f√©r√©es du navigateur
  const browserLanguages = navigator.languages || [navigator.language]

  // Teste chaque langue du navigateur dans l'ordre de pr√©f√©rence
  for (const browserLang of browserLanguages) {
    // Teste d'abord la langue compl√®te (ex: fr-FR)
    if (getActuallyAvailableLanguages().includes(browserLang)) {
      return browserLang
    }

    // Teste ensuite juste le code de langue (ex: fr de fr-FR)
    const langCode = browserLang.split('-')[0]
    if (getActuallyAvailableLanguages().includes(langCode)) {
      return langCode
    }
  }

  // Retourne la langue par d√©faut si aucune correspondance
  return config.defaultLanguage
}

/**
 * V√©rifie si une langue est support√©e par l'application
 * @param languageCode Le code de langue √† v√©rifier
 * @returns true si la langue est support√©e
 */
export function isLanguageSupported(languageCode: string): boolean {
  return getActuallyAvailableLanguages().includes(languageCode)
}

/**
 * R√©cup√®re la langue par d√©faut de l'application
 * @returns Le code de langue par d√©faut
 */
export function getDefaultLanguage(): string {
  return config.defaultLanguage
}

/**
 * R√©cup√®re toutes les langues disponibles dans l'application
 * @returns Tableau des codes de langues disponibles
 */
export function getAppAvailableLanguages(): string[] {
  return config.availableLanguages
}

/**
 * Normalise un code de langue (retire les sp√©cificit√©s r√©gionales si n√©cessaire)
 * @param languageCode Le code de langue √† normaliser
 * @returns Le code de langue normalis√©
 */
export function normalizeLanguageCode(languageCode: string): string {
  // Si la langue compl√®te est support√©e, la retourner
  if (isLanguageSupported(languageCode)) {
    return languageCode
  }

  // Sinon, essayer juste le code de base
  const baseCode = languageCode.split('-')[0]
  if (isLanguageSupported(baseCode)) {
    return baseCode
  }

  // Retourner la langue par d√©faut si rien ne correspond
  return getDefaultLanguage()
}

/**
 * Interface pour les objets de langue avec m√©tadonn√©es
 */
export interface LanguageInfo {
  code: string
  name: string
  flag: string
}

/**
 * M√©tadonn√©es des langues support√©es - Top 20 des langues les plus r√©pandues
 */
const languageMetadata: Record<string, Omit<LanguageInfo, 'code'>> = {
  // Langues europ√©ennes
  en: { name: 'English', flag: 'üá¨üáß' },
  es: { name: 'Espa√±ol', flag: 'üá™üá∏' },
  fr: { name: 'Fran√ßais', flag: 'üá´üá∑' },
  de: { name: 'Deutsch', flag: 'üá©üá™' },
  it: { name: 'Italiano', flag: 'üáÆüáπ' },
  pt: { name: 'Portugu√™s', flag: 'üáµüáπ' },
  ru: { name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
  nl: { name: 'Nederlands', flag: 'üá≥üá±' },
  pl: { name: 'Polski', flag: 'üáµüá±' },
  zh: { name: '‰∏≠Êñá', flag: 'üá®üá≥' },
  ja: { name: 'Êó•Êú¨Ë™û', flag: 'üáØüáµ' },
  ko: { name: 'ÌïúÍµ≠Ïñ¥', flag: 'üá∞üá∑' },
  ar: { name: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©', flag: 'üá∏üá¶' },
  tr: { name: 'T√ºrk√ße', flag: 'üáπüá∑' },
}

/**
 * R√©cup√®re les langues disponibles avec leurs m√©tadonn√©es
 * @returns Tableau des langues avec code, nom et drapeau
 */
export function getAvailableLanguagesWithMetadata(): LanguageInfo[] {
  return getActuallyAvailableLanguages().map((code) => ({
    code,
    name: languageMetadata[code]?.name || code,
    flag: languageMetadata[code]?.flag || 'üåê',
  }))
}
